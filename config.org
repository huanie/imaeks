#+TITLE: Huan's GNU Emacs config
#+LANGUAGE: en
* Interface
Stupid ricing, I could live without it.
** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code" :height 100)
#+end_src
** Unclutter Interface
   #+begin_src emacs-lisp
     (scroll-bar-mode -1)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
   #+end_src
** Theme
   #+begin_src emacs-lisp
     (use-package doom-themes
       :config
       (when window-system
         (setq doom-themes-enable-bold t
               doom-themes-enable-italic t)
         (load-theme 'doom-gruvbox-light t)
         (doom-themes-visual-bell-config)
         (doom-themes-org-config)))

     ;; error flashing
     (setq visible-bell t)
   #+end_src
** Modeline
#+begin_src emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)

  (use-package all-the-icons)

  (use-package doom-modeline
    :init
    (when window-system
      (doom-modeline-mode 1))
    :custom
    (doom-modeline-minor-modes t)
    (doom-modeline-enable-word-count t))
#+end_src
** Dashboard
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)

     (use-package dashboard
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-items '((recents . 5))))
   #+end_src
* Text-Editing
Good for all sorts of text-editing.
** Options to enable
   #+begin_src emacs-lisp
     (show-paren-mode t)

     (electric-pair-mode t)
     (setq electric-pair-inhibit-predicate
           (lambda (c)
             (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))

     (add-hook 'org-mode-hook 'org-indent-mode)

     (require 'org-tempo)

     (add-hook 'text-mode-hook 'visual-line-mode)

     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
     (add-hook 'text-mode-hook 'display-line-numbers-mode)
   #+end_src
** Emacs-Lisp template
=<el= and then pressing =Tab= creates a codeblock for Emacs-Lisp in Org-Mode.
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src
* Convenience
** Ivy
Better minibuffer completion, isearch, and what not.
#+begin_src emacs-lisp
  (use-package counsel
    :diminish counsel-mode
    :config
    (counsel-mode 1))

  (use-package ivy
    :diminish ivy-mode
    :bind
    ("C-s" . swiper)
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
#+end_src
** Projectile
Project management.
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :init
    (projectile-mode +1)
    (when (file-directory-p "~/mystuff/work/")
      (setq projectile-project-search-path '("~/mystuff/work/")))
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map)))

  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode))
#+end_src
** Disable backups and autosaves
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src
** Kill a line
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-k") 'kill-whole-line)
   #+end_src
** Yes or No to Y or N
   #+begin_src emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Linear undo and redo
Default undo and redo can be confusing, with this package the behaviour is like in every normal Editor.
#+begin_src emacs-lisp
  (use-package undo-fu

    :bind
    ("C-/" . undo-fu-only-undo)
    ("C-?" . undo-fu-only-redo))
#+end_src
* Functions
** Close current buffer
   #+begin_src emacs-lisp
     (defun delete-current-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))

     (global-set-key (kbd "C-x k") 'delete-current-buffer)
   #+end_src
** Visit config.org
   #+begin_src emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.config/emacs/config.org"))

     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
** Insert empty line below
   #+begin_src emacs-lisp
     (defun insert-empty-line-below ()
       (interactive)
       (end-of-line)
       (newline-and-indent))

     (global-set-key (kbd "C-o") 'insert-empty-line-below)
   #+end_src
** Kill inside word
   #+begin_src emacs-lisp
     (defun kill-inside-word ()
       (interactive)
       (forward-char 1)
       (backward-word)
       (kill-word 1))

     (global-set-key (kbd "C-c k w") 'kill-inside-word)
   #+end_src
#+end_src
* Minor packages
Packages that enhances the experience but isn't going to change the workflow.
** Rainbow delimiters
Matching colors for matching parentheses.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src
** Which-Key
Shows possible key combinations after idling.
#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
#+end_src
** Diminish
For hiding minor modes.
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
** Auto Updates
Once a week ask for updates.
#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (setq auto-package-update-prompt-before-update t)
    (setq auto-package-update-interval 7)
    (auto-package-update-maybe))
#+end_src
** Whitespace Cleaner
Only trim whitespaces on lines that you edit.
#+begin_src emacs-lisp
  (use-package ws-butler
    :diminish ws-butler-mode
    :config
    (ws-butler-global-mode 1))
#+end_src
* Language Server
#+begin_src emacs-lisp
  (use-package lsp-mode
    :diminish lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    :commands lsp)
#+end_src
** Completion
#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :after lsp-mode
    :hook
    (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection)
          ("<SPC>" . company-abort))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+end_src
** Languages
*** Markup
**** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))
#+end_src
**** HTML and CSS
#+begin_src emacs-lisp
  (add-hook 'html-mode-hook 'lsp)
  (add-hook 'css-mode-hook 'lsp)
#+end_src
*** Kode
**** Javascript
#+begin_src emacs-lisp
  (add-hook 'javascript-mode-hook 'lsp)
#+end_src
