#+STARTUP: overview
#+TITLE: Huan's GNU Emacs config
#+LANGUAGE: en
#+OPTIONS: num:nil

* Interface
Stupid ricing, I could live without it.
** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code" :height 100)
#+end_src
** Unclutter Interface
   #+begin_src emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+end_src
** Theme
   #+begin_src emacs-lisp
     (use-package doom-themes
       :ensure t
       :config
       (setq doom-themes-enable-bold t
             doom-themes-enable-italic t)
       (when window-system
         (load-theme 'doom-gruvbox t))
       (doom-themes-visual-bell-config)
       (doom-themes-org-config))

     ;; error flashing
     (setq visible-bell t)
   #+end_src
** Modeline
#+begin_src emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)

  (use-package all-the-icons
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :init
    (when window-system
      (doom-modeline-mode 1))
    :custom
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-enable-word-count t)
    (setq doom-modeline-enable-word-count t))
#+end_src
** Dashboard
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)

     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-items '((recents . 5))))
   #+end_src
* Text Editing
** Options to enable
   #+begin_src emacs-lisp
     (show-paren-mode 1)

     (electric-pair-mode t)
     (setq electric-pair-inhibit-predicate
	   (lambda (c)
	     (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))

     (add-hook 'org-mode-hook 'org-indent-mode)

     (require 'org-tempo)

     (add-hook 'text-mode-hook 'visual-line-mode)

     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
     (add-hook 'text-mode-hook 'display-line-numbers-mode)

     (when window-system (hl-line-mode t))
   #+end_src
** Emacs-Lisp template
=<el= and then pressing =Tab= creates a codeblock for Emacs-Lisp in Org-Mode.
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp"))
#+end_src
* Convenience
** Kill a line
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-k") 'kill-whole-line)
   #+end_src
** Yes or No to Y or N
   #+begin_src emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
** Linear undo and redo
#+begin_src emacs-lisp
  (use-package undo-fu
    :ensure t
    :bind
    ("C-/" . undo-fu-only-undo)
    ("C-?" . undo-fu-only-redo))
#+end_src
* Functions
** Close current buffer
   #+begin_src emacs-lisp
     (defun delete-current-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))

     (global-set-key (kbd "C-x k") 'delete-current-buffer)
   #+end_src
** Visit config.org
   #+begin_src emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.config/emacs/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
** Insert empty line below
   #+begin_src emacs-lisp
     (defun insert-empty-line-below ()
       (interactive)
       (end-of-line)
       (newline-and-indent))

     (global-set-key (kbd "C-o") 'insert-empty-line-below)
   #+end_src
** Kill inside word
   #+begin_src emacs-lisp
     (defun kill-inside-word ()
       (interactive)
       (forward-char 1)
       (backward-word)
       (kill-word 1))

     (global-set-key (kbd "C-c k w") 'kill-inside-word)
   #+end_src
#+end_src
* Helpful packages
** Rainbow delimiters
Matching colors for matching parentheses.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :ensure t
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src
** Rainbow-Mode
Background behind hexcodes will change to their colors.
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish rainbow-mode
    :ensure t
    :hook
    (prog-mode . rainbow-mode))
#+end_src
** Which-Key
Shows possible key combinations after idling.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+end_src
** Diminish
For hiding minor modes.
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src
